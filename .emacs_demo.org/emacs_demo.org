* my (computer) life before Emacs
** alt-tabbing the hell out of my hands
** confused, what files / terminals are open, alt-tabbing the shit out of my hands to go somewhere
** clicking in the file explorer, slow mouse selecting files/directories
** annoyed by slow editing capabilities in IDE's (e.g. matlab: replace string in selected area -> not possible, arrrgh). many repeated manual editing tasks...

* what is Emacs?
** Emacs is one of the 5 oldest software projects (over 40 years, since 1970), written by Richard Stallman ("priest of the church of Emacs") --> reference/ pic of stallman
*** it is FREE software (GNU public license) - MORE than open-source
** me: "emacs is not a text-editor. emacs is a text-based interface-platform, to automize your work flow."
** thus ANY text-editing style can be plugged-in (vim-style, emacs-style, etc.)
** everything is a function. every function can be called via customized short cut. --> everything can be done via short-cut.

#                                   Emacs                            
#           ____________________________^___________________________
#          /                                                        \
#                                              
#              +--text-editing-------------+                      
#              |                           |                       
#              |                 +---------+-----system-admin-------+
#              |                 |         |                        |
#              |                 |         |                        |
#              |                 |         |   file operations      |
#              |                 |         |                        |
#              |                 |         |   terminal-commands    |
#              |                 |         |                        |
#              +-----------------+---------+   third-party programs |
#                                |                                  |
#                                |                                  |
#                                +----------------------------------+
* Why emacs?  
** is is just mental illness?
** no.
** it isn't /just/ mental illness! :D
* --> Emacs "is a superb operating system, it just lacks a good text-editor": "OS-part" + "Text-Editor-part" ('text-editing-short-cut-concept')
* Editor-part:  *the VIM text editing language* - "SYTH (VIM) + JEDI (EMACS) = SUPERPOWER" evil-mode (emacs-"plugin", best vim-emulation ever) --> the vim text editing language
** "marry the Jedis (emacs) and Syths (vim)" --> the "Syths" just are better in text-editing.. --> plugin the "EVIL-mode" :)
** Emacs cannot be compared to VIM, but the VIM text editing system can be used inside Emacs
*** VIM is more a concept for short-cut-design for text-editing
*** since in emacs short cuts are fully customizable, using VIM in Emacs just means redefining the default short-cuts the "VIM-way"
** why the VIM short-cut system is awesome - demo of cool work flow features:
*** navigate h,j,k,l
*** modal editing -> no pain of ctrl-/alt-key-combinations
**** "VIM is an editing language" --> verb + object
***** verbs: "y" (copy/yank) "d" (delete) "v" (mark) "f" (forward) "F" (backward) "c" (change/substitute) 
***** objects: "w" (word) "W" (big word) ")" (text within parenthesis)
***** examples: "vi)" "vi]" "viw" "viW" etc 
***** --> "VIM knows what I mean in more abstract way" --> super cool: repeat that with "."
***** line editing super practical: "dd" "yy" --> delete/copy whole current line
***** go to line --> ":" <line_number> <enter>
***** final comment on modal editing: some critisize: extra effort to type something in. but actually the most part of editing text (especially programming) you do not write text, but navigate/copy/paste/delete/replace strings/etc. --> that s why modal editing is more efficient, cause it avoids "hand-tiring" classic ctrl-key-chords... 
*** goodies:
**** "g ;" --> last edited lines
**** faster moving: "b" "w" "e", repeat movement with ";" -> demo: sentences: "f." ";" ";" etc.
**** undo/redo: "u" / "ctrl-r" --> super fast
**** "%" --> jump corresponding parenthesis
**** mark lines to return to: 
***** "mm" "'m" or
***** "ma" "'a"
**** "copy-history" --> really cool experience, just shuffle through old pastes (I bound it to ctrl-p/n (previous/next) --> demo
**** scroll with: ctrl-e / ctrl-y
**** "go to line" with :<line-number>
**** copy/select inner/outer expression, e.g. vi" / va" / viw / viW 
** my goodies:
*** "electric" indentation (electric-indent-mode) "it s electric!"
**** mark region and hit "="
**** or hit "==" -> indent line ; 
**** e.g. new line / next line and then just hit "==" --> no SPC SPC SPC ... puääääähhh
*** mark just pasted region "SPC-v" --> do something about it (e.g. auto-indent "=")
*** "live"-replace regex with looping replace history (super usefull) --> demo 
*** auto-complete-mode

** VIM's "absolute extra superweapon" - the leader key
*** when in normal mode: leader key is a "non-cordal" "flying" way to access superfast your favourite functions: e.g. i use : SPC-b --> switch to other file / SPC-s --> save file / etc.
**** best thing: you can vary the bindings depending on which "mode", i.e. working on python files (python-mode) or matlab-files or c++ or whatever...
*** i use it EXTENSIVELY --> bound it to SPACE (most comfortable key by far)
** advantage of knowing vim: vim is installed on every linux system (e.g. servers), quickly edit some file with the "real vim" -> in terminal: vim test.txt
** final note: Emacs has it s own key-binding-system --> but pinky-problem (demo with CTRL-...)
*** but also handy to know --> in some packages not "evilized" , and on linux-terminals (ctrl-r, ctrl-g, ctrl-n/p/b/f, ctrl-e/a, ctrl-d
*** i use emacs-bindings in terminals (did not find modal editing convenient here)
** final note 2: some people say "oouh, that s so many short cuts, it would distract me" the opposite is the case: "you think more about content, less about editing, it get s 'out of the way' while you re doing what you re doing"
* The OS-part: general navigation: files/windows/directories/terminals
** EMACS workflow (existing packages)
*** switch file: helm-mini (helm package), recent/current files -> type one or more letter-sequences, order does not matter
**** (compare to matlabs horrible "tab-workflow" --> little demo with matlab)
*** work with files/directories -> dired
**** fulltext search super fast: superb interface to ripgrep-search --> demo 
**** find files/directories recursively - interface
*** use as terminal multiplexer --> ansi-term
*** strongest feature: totally flexible window-arrangement --> "demo split windows"
**** arrange everything you need for your work in an integrated way in ONE view: (files/terminal/directory/notes-todos/calendar-agenda)
**** split window vert/horizontally --> view multiple parts of same file --> super practical (no mousescrolling back and forth)
**** "my add-on-goody" here: resize windows with h/j/k/l (after SPC-')
*** avy-mode --> (ace-goto-char) jump super fast
*** TRAMP --> transfer files between servers
*** the power of emacs 

** EMACS workflow (my stuff)
*** navigate "windows": alt + h/j/k/l
*** copy/paste paths: F1 / F2
**** super practical: context of terminal/file-explorer -> go where your terminal is / cd where your file-explorer is. and both situations occur A LOT. 
*** move buffer to some other window: F3 / F4


* latex (auctex)
** multi-file /directory support
*** 'C-=' -> cool navigation in pop-up toc, also multi-file-document 
*** compile from any file (master doc as meta variable)
*** preview (a little show off, i don t use it that much)
*** reftex --> figures / tables / sections / cite --> no copy paste

* emacs with matlab:
** same experience (use matlab-package and programmed a little on top to have debugging experience)
** make matlab-shell / dired-window / etc
** show a bit debugging experience (F5/F8/F12/F9)
** completion (company mode)
* org-mode - emacs has a lot of great packages, but org-mode IS emacs's SILVERWARE 
** what is org mode: "basically an outline tool. and a WHOLE LOT more!"
*** quick demo outlining: headings, move headings, indent headings, add labels (TODO/DONE/etc.) - all super fast (not possible in word this fast...)
** what's cool: data is PURE text files
*** something which no proprietary program wants, but it IS the best for the user
*** you can version control it with git (super good advantage)
*** full text search with tools that are actually good at that job --> e.g. ripgrep (linux-philosophy)
*** you can read org files understandably even without emacs (!)
** so what can you do with it / application cases:
*** shape thoughts
*** take notes
**** superfast for live-note-taking (here speed counts)
***** at a conference
***** on the phone
*** keep track of todos
*** organise meetings / scheduling
*** cool goodies:
**** read latex formulas / preview
**** insert/preview images
**** these things made org-mode my MSWORD-substitution
*** actually produce high quality publishable documents (!)
**** export -> latex / html (like a charme...) --> some authors/bloggers (not programmers) edit their writings only in org-mode, even whole books (!)
*** insert and execute code snippets -> the "better jupyther-notebook", because ANY programming language
**** make demo: write a python / c++ / witch "hello world"
*** some goodies:
**** clock in/out
***** estimate effort
***** current clocked activity automatically in mode-line 
** my own "org-mode-extension" for scheduling days/weeks with todos and appointments: planet-mode (on github) --> quick demo

* conclusion 1:  the power of emacs: when you work on all text-files in emacs, you keep your customized/automized/efficient workflow in EVERY programming language / project
* last but not least - Emacs and all this stuff is working also in a terminal mode - in ssh connections!
** very economic band width --> "e.g. working when you re in a hostel with shitty internet"
** all servers today are linux --> so you can use emacs, mostly preinstalled, and if not: just compile it
** usefull when on server --> work in a screen-session --> "kind of reconnectable desktop experience"

* the learning curve... the price to pay
** i mean you can use emacs out of the box, without programming anything, but...
** the "sky-limit" power of emacs only comes to play when you program your own customization
** and that is where you have to learn the programming language Emacs is based on: LISP
** but hey: good documentation + it is a very mind-expanding language, different from others, and some cool features
** apropos documentation: emacs is self-documenting (!)
*** want to know what a function does? --> C-h f <function-name>
*** want to know what a key does? --> C-h k <key>

* some comments on my own work flow:
** prefer Alt to CTRL key-combos for short-cuts for most important actions. Alt is sooo much more comfortable than CTRL.
* funny things "M-x xxx"  everything
** sketch M-x lightning --> look/google
** psychotherapist
** tetris
** make coffee, ahaha
*** https://github.com/themad/htcpcp
*** https://github.com/0mark/htcpcp
* good links:
** https://batsov.com/articles/2011/11/19/why-emacs/
#+BEGIN_SRC sh
echo "hello"
#+END_SRC

* misc
** Machinists make and modify their own tools. Good computer professionals do the same thing. (quelle?)
** (pers. opinion) keyboard orientstion is a feature, not a bug. mouse and menue are slow! Hands never leaving keyboard means /speed/.
** the beauty of meaning full commands: example: count-lines
*** M-x "lin cou" --> suggestion (helm): count-lines-region --> [Enter] --> and boom!
* emacs, what is it actuall? -> does not replace an OS, but rather "some of the user interfaces of the OS"
[[./screenshot_20200714_183505.png]]
** emacs support for LSP (language server proticol) lsp-mode
*** VScode supports LSP? cool! they dwveloped it. well, emacs already integrates that by community driven project. so: everything VScode will ever have and emacs does not, will automatically come sooner or later to emacs anyway. but in the true free software spirit.
** vscode vs emacs: part of the general trade off problem: investment cost (quick startup) versus long time running cost.
*** i.e, VScode quicker start, works out of the box. but mainstream configuration not optimized for you individual workflow/tasks. as i said, vs code is in the middle of the trade off, you can install extensions, but the customizations have limits, you will not have sth 100% optimized for your workflow. whereas in emacs, there is no limit. it s 100% hackable and because the community drives it, there is always very good functionalities already there, which you can use uotofthe box (yes, have to cinfigure more), but change exaxtly to your needs. my favourite: short cuts. intwgration with other extensions..
** vscode vs emacs: emacs has more generic UI-base-concept, buffers. everything is a buffer. this gives much more flexibility, when in vscode, the UI-base is already fixed: explorer left/ output terminal below, tabbed file views main. so in it s root you can create your UI in emacs totally freely to your needs. anx it s very dynamic and flexible (e.g. multiple directories/terminals/files), you decide easily what you want to see where in the screwn (your attention space, "defend your attention space - it is one of the most valuable things you have im day to day life"). in vscode it is (a lot more) fixed.
** vscode is NOT really opensource: "proprietary elements to access plugin store which makes whole thing useless." that means ALL the configurability is controlled by microsoft. when they decide to shut it down, you r f***ed. 
** "Additionally, there is Emacs Psychotherapist and what programmer doesn't need that!?" 
** of coarse emacs has historical baggage. it is >40 years old! the backend-language elisp is not asyncronous and should be changed to a more modern Lisp (clojure/scheme/common lisp/ etc.). so companies like Google/ Microsoft could easily create a better free community driven editor. well did they? vscode or google xi? it seems so. vscode is the best alternative currently to emacs, written in a modern extensible language, electron/javascript. but it really only seems so. because it s opensource image is faked. you ll depend on microsoft to maintain it, parts are proprietary, the extension store (!). because as a company they don t have as an objective to give free presents to the cimmunity. fter lurking users in pushing market share in no time (2-3 years from 0 to 50% !), they ll want sth from you: date/attention to sell sth etc, (defend your attention space). so:  they did not and probably won t ever provide a truely free software alternative to emacs, which brings us to another main advantage of emacs: good and big cimmunity has been around for 40 years, will be there in the next 40. what you invest in emacs now, you ll use all your life. will vscode be there in 40 years? probably not. it ll go when the next $NEWHOTNESS appears, super google editor or whatever.
