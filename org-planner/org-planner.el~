(defun create_daily_files()
    " creates daily files in $ORG/daily/ . determines the latest daily-file, and adds new daily-files for <days> number of days."
    ;* determine latest daily-file
    ;; 2019_12_19_Mo.org
    )

(defvar dow-time-days '("Sun" ;; 0
                        "Mon"  ;; 1
                        "Tue"  ;; 2
                        "Wed"  ;; 3
                        "Thu"  ;; 4
                        "Fri"  ;; 5
                        "Sat")  ;; 6
  )

(defvar org-planner-daily-dir "~/org/daily")

(defun convert-dow-abbreviation (dow)
  (setq weekday-abbr (nth dow dow-time-days))
 weekday-abbr)

(defun create_daily_file()
  (interactive)
  " creates daily file <year>_<month>_<day>_<weekdayname>.org for <date>. 
    1 argument: date ... time 
    "
  ;;* concat file name 
  (setq date-raw (current-time))
  (setq date (decode-time date-raw))
  (setq year (number-to-string (nth 5 date)))
  (setq month (number-to-string (nth 4 date)))
  (setq day (number-to-string (nth 3 date)))
  (setq weekday-int (nth 6 date))
  (setq weekday-abbr (convert-dow-abbreviation weekday-int))

   (setq filename (concat year "_" month "_" day "_" weekday-abbr ".org"))
   (setq file-full-name (concat  (file-name-as-directory org-planner-daily-dir) filename))
   ;;* create file (2 options)
   ;;** option1: with-temp-buffer
   ;; (with-temp-buffer (write-file file-full-name)) ;; equivalent to >> echo "" > file
   ;;** option2: write-region
   (write-region "" nil file-full-name) ;; equivalent to >> echo "" >> file
   ;; option2 safer, in case dayfile exists, content is not deleted
  )

(setq a nil)
(defun dummy (&optional a)
  (if (not a)
      (message "yes")
    (message "no")
    )
(message a)
)
